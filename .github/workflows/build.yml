name: Build & Tests

on: [push, pull_request]

jobs:

  build:

    strategy:
      fail-fast: false
      matrix:
        config:
          - os: ubuntu-latest
            name: Ubuntu GCC
            artifact: ubuntu-gcc
            compiler-c: gcc-10
            compiler-cxx: g++-10
            extra_cmake_args: -DNSH_ENABLE_COVERAGE=ON
          # - os: ubuntu-latest
          #   name: Ubuntu Clang
          #   artifact: ubuntu-clang
          #   compiler-c: clang-12
          #   compiler-cxx: clang++-12
          # - os: macos-latest
          #   name: MacOS Clang
          #   artifact: macos-clang
          #   compiler-c: clang
          #   compiler-cxx: clang++
          # - os: windows-latest
          #   name: Windows MinGW
          #   artifact: windows-mingw
          #   compiler-c: gcc
          #   compiler-cxx: g++
          #   extra_cmake_args: -G "MSYS Makefiles"
          - os: ubuntu-latest
            name: STM32 GCC
            artifact: stm32-gcc
            compiler-c: gcc
            compiler-cxx: g++
            extra_cmake_args: -DCMAKE_TOOLCHAIN_FILE=cmake/Toolchains/Stm32Gcc.cmake -DSTM32_TOOLCHAIN_PATH=/tmp/gcc-arm-none-eabi -DNSH_PLATFORM_NAME=Stm32NucleoF411RE
        build_type: [Release, Debug]

    name: ${{ matrix.config.name }} - ${{ matrix.build_type }}
    runs-on: ${{ matrix.config.os }}

    steps:

      - name: Checkout project
        uses: actions/checkout@v2

      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install cmake

      - name: Install arm-none-eabi-gcc
        if: ${{ matrix.config.name == 'STM32 GCC' }}
        run: |
          wget https://developer.arm.com/-/media/Files/downloads/gnu-rm/10.3-2021.10/gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2
          mkdir -p /tmp/gcc-arm-none-eabi
          tar  --strip-components=1 -C /tmp/gcc-arm-none-eabi -xf gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2

      - name: Configure
        env:
          CC: ${{ matrix.config.compiler-c }}
          CXX: ${{ matrix.config.compiler-cxx }}
        run: |
          cmake ${{ matrix.config.extra_cmake_args }} -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

      - name: Build
        run: |
          cmake --build build --config ${{ matrix.build_type }}

      - name: Run tests
        working-directory: build
        run: ctest -V

      - name: Coverage
        if: ${{ matrix.config.name == 'Ubuntu GCC' && matrix.build_type == 'Debug' }}
        run: |
          # Install lcov
          sudo apt install lcov
          # Generate coverage report
          cmake --build build --target coverage
          # Uploading report to CodeCov
          bash <(curl -s https://codecov.io/bash) -f build/coverage.info || echo "Codecov did not collect coverage reports"

      - name: Install Strip
        run: |
          cmake --install build --prefix instdir --strip

      - name: Upload
        uses: actions/upload-artifact@v1
        with:
          path: ./instdir
          name: ${{ matrix.config.artifact }}-${{ matrix.build_type }}
